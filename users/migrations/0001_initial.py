# Generated by Django 4.2.4 on 2023-10-20 10:03

import core.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models
import users.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("core", "__first__"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomerProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=15,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=15,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=12,
                        validators=[
                            core.validators.PhoneNumberValidator(10, 12),
                            users.validators.phone_number_validator,
                        ],
                    ),
                ),
                ("address", models.CharField(blank=True, max_length=100, null=True)),
                ("photo", models.ImageField(blank=True, null=True, upload_to="")),
                (
                    "contact_email",
                    models.EmailField(blank=True, max_length=50, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SupplierProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=15,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=15,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=12,
                        validators=[
                            core.validators.PhoneNumberValidator(10, 12),
                            users.validators.phone_number_validator,
                        ],
                    ),
                ),
                ("address", models.CharField(blank=True, max_length=100, null=True)),
                ("photo", models.ImageField(blank=True, null=True, upload_to="")),
                (
                    "contact_email",
                    models.EmailField(blank=True, max_length=50, null=True),
                ),
                (
                    "specialist_type",
                    models.CharField(
                        choices=[
                            ("cynology", "Кинолог"),
                            ("veterenary", "Ветеринар"),
                            ("shelter", "Зооняня"),
                            ("grooming", "Грумер"),
                        ],
                        max_length=30,
                        validators=[core.validators.validate_letters],
                        verbose_name="тип услуги",
                    ),
                ),
                (
                    "outdoor",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.outdoor",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=50, unique=True)),
                ("profile_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "profile_content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["profile_content_type", "profile_id"],
                        name="users_user_profile_00dafb_idx",
                    )
                ],
            },
            managers=[
                ("objects", users.models.CustomUserManager()),
            ],
        ),
    ]
